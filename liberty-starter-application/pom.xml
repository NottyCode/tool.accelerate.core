<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>tool.artisan.core</groupId>
  <artifactId>liberty-starter-application</artifactId>
  <version>1.0</version>
  <packaging>war</packaging>
  <name>Liberty Starter application</name>
  <description>A quick start for building Liberty applications</description>
  
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>https://raw.github.com/WASdev/tool.artisan.core/master/LICENSE</url>
			<distribution>repo</distribution>
		</license>
 	</licenses>
  
   <properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties> 
  
  <dependencies>
  	<dependency>
		<groupId>tool.artisan.service</groupId>
		<artifactId>starter-model</artifactId>
		<version>1.0</version>
		<scope>compile</scope>
	</dependency>
  
  	<dependency>
  		<groupId>javax.ws.rs</groupId>
  		<artifactId>javax.ws.rs-api</artifactId>
  		<version>2.0.1</version>
  		<scope>provided</scope>
  	</dependency>
  	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
  		<scope>provided</scope>
  	</dependency>
  	<dependency>
  		<groupId>org.eclipse.persistence</groupId>
  		<artifactId>javax.persistence</artifactId>
  		<version>2.1.0</version>
  		<scope>provided</scope>
  	</dependency>
    <dependency>
        <groupId>javax.json</groupId>
        <artifactId>javax.json-api</artifactId>
        <version>1.0</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>javax.enterprise</groupId>
        <artifactId>cdi-api</artifactId>
        <version>1.2</version>
        <scope>provided</scope>
    </dependency>
   	<dependency>
		<groupId>io.swagger</groupId>
		<artifactId>swagger-annotations</artifactId>
		<version>1.5.4</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>io.swagger</groupId>
		<artifactId>swagger-core</artifactId>
		<version>1.5.5</version>
		<scope>compile</scope>
	</dependency>
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-io</artifactId>
		<version>1.3.2</version>
		<scope>provided</scope>
	</dependency>
  	<!-- Test dependencies -->
     <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
      </dependency>
      <dependency>
          <groupId>org.apache.cxf</groupId>
          <artifactId>cxf-rt-rs-client</artifactId>
          <version>3.1.1</version>
          <scope>test</scope>
      </dependency>
	<dependency>
		<groupId>net.sourceforge.htmlunit</groupId>
		<artifactId>htmlunit</artifactId>
		<version>2.19</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.glassfish</groupId>
		<artifactId>javax.json</artifactId>
		<version>1.0.4</version>
		<scope>test</scope>
	</dependency>
  </dependencies>
  
	<build>
		<plugins>
			<!-- Swagger documentation -->
			<!-- Step 1 : generate the documentation by scanning the Java classes -->
			<plugin>
			    <groupId>com.github.kongchen</groupId>
			    <artifactId>swagger-maven-plugin</artifactId>
			    <version>3.1.2</version>
			    <configuration>
			        <apiSources>
			            <apiSource>
			            	<springmvc>false</springmvc>
			                <locations>com.ibm.ws.microservices.api.v1</locations>
			                <schemes>http</schemes>
			                <basePath>/start/api</basePath>
			                <info>
			                    <title>Liberty Starter API</title>
			                    <version>v1</version>
			                    <description>This is the API for clients to connect to</description>
			                    <license>
			                        <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
			                        <name>Apache 2.0</name>
			                    </license>
			                </info>
			                <swaggerDirectory>${project.build.directory}/jaxrs-analyzer</swaggerDirectory>
			            </apiSource>
			        </apiSources>
			    </configuration>
				<executions>
			        <execution>
			            <phase>compile</phase>
			            <goals>
			                <goal>generate</goal>
			            </goals>
			        </execution>
			    </executions>
			</plugin>			
			<!-- Package up the generated file into the META-INF directory -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<webResources>
						<resource>
							<directory>${project.build.directory}/jaxrs-analyzer</directory>
							<targetPath>META-INF</targetPath>
						</resource>
					</webResources>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<packagingExcludes>javax*</packagingExcludes>
					<warName>${project.artifactId}</warName>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>skeleton</id>
						<configuration>
							<classesDirectory>${basedir}/skeletons/base</classesDirectory>
							<finalName>services/skeletonLibertyBuildImage</finalName>
						</configuration>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
					<!-- Executions below will likely be removed when each technology becomes it's own plugin -->
					<execution>
						<id>peristence</id>
						<configuration>
							<classesDirectory>${basedir}/skeletons/technologies/Persistence</classesDirectory>
							<finalName>services/Persistence/skeleton</finalName>
						</configuration>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
					<execution>
						<id>REST</id>
						<configuration>
							<classesDirectory>${basedir}/skeletons/technologies/REST</classesDirectory>
							<finalName>RESTSkeleton</finalName>
						</configuration>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
					<execution>
						<id>Servlet</id>
						<configuration>
							<classesDirectory>${basedir}/skeletons/technologies/Servlet</classesDirectory>
							<finalName>ServletSkeleton</finalName>
						</configuration>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
					<execution>
						<id>SpringBoot</id>
						<configuration>
							<classesDirectory>${basedir}/skeletons/technologies/SpringBoot</classesDirectory>
							<finalName>services/SpringBoot/skeleton</finalName>
						</configuration>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
					<execution>
						<id>WebSockets</id>
						<configuration>
							<classesDirectory>${basedir}/skeletons/technologies/WebSockets</classesDirectory>
							<finalName>WebSocketsSkeleton</finalName>
						</configuration>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
            <!-- Plugin to run unit tests and not run the FVT tests which require a Liberty server instance -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
		        <configuration>
		          <additionalClasspathElements>
		            <additionalClasspathElement>src/main/resources</additionalClasspathElement>
		            <additionalClasspathElement>${project.build.directory}</additionalClasspathElement>
		          </additionalClasspathElements>
		        </configuration>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <id>default-test</id>
                        <configuration>
                            <includes>
                                <include>**/unit/**</include>
                            </includes>
                            <reportsDirectory>${project.build.directory}/test-reports/unit</reportsDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
