group = 'myParentGroupId'
version = '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
        classpath files('gradle/wlp-anttasks.jar')
    }
}

apply plugin: 'war'
apply plugin: 'liberty'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    // Liberty server properties
    wlpServerName = 'LibertyProjectServer'
    serverDirectory = "${buildDir}/wlp/usr/servers/${wlpServerName}"
    testServerHttpPort = 9080
    testServerHttpsPort = 9443

    // This is set in the ibm-web-ext.xml file
    warContext = 'myLibertyApp'
    appName = 'IainsProject'
    packageFile = "${project.buildDir}/${appName}.zip"
    packagingType = 'usr'

    // Cloud Foundry/Bluemix properties
    // This is the host for your app in Bluemix and what it will be called in the dashboard. -->
    cfHost = appName
    cfContext = 'eu-gb.mybluemix.net'
    cfTarget = 'https://api.eu-gb.bluemix.net'
    cfSpace = 'dev'
    cfContextRoot = "${cfHost}.${cfContext}/${warContext}"

    // The Cloud Foundry or Bluemix organization, username and password can be entered here.
    // cfOrg = ''
    // cfUsername = ''
    // cfPassword = ''
}

repositories {
    mavenCentral()
    maven {
        name 'liberty-starter-maven-repo'
        url 'http://localhost:9082/start/api/v1/repo'
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.cxf:cxf-rt-rs-client:3.1.1'
    testCompile 'org.glassfish:javax.json:1.0.4'

    providedCompile 'net.wasdev.wlp.starters.rest:provided-pom:0.0.3'
    providedCompile 'net.wasdev.wlp.starters.microprofile:provided-pom:0.0.2'
    providedCompile 'net.wasdev.wlp.starters.web:provided-pom:0.0.3'
    providedCompile 'net.wasdev.wlp.starters.websocket:provided-pom:0.0.4'
    providedCompile 'net.wasdev.wlp.starters.persistence:provided-pom:0.0.3'
    providedCompile 'net.wasdev.wlp.starters.springbootweb:provided-pom:0.0.3'
    providedCompile 'net.wasdev.wlp.starters.swagger:provided-pom:0.0.2'

    runtime 'net.wasdev.wlp.starters.rest:runtime-pom:0.0.3'
    runtime 'net.wasdev.wlp.starters.microprofile:runtime-pom:0.0.2'
    runtime 'net.wasdev.wlp.starters.web:runtime-pom:0.0.3'
    runtime 'net.wasdev.wlp.starters.websocket:runtime-pom:0.0.4'
    runtime 'net.wasdev.wlp.starters.persistence:runtime-pom:0.0.3'
    runtime 'net.wasdev.wlp.starters.springbootweb:runtime-pom:0.0.3'
    runtime 'net.wasdev.wlp.starters.swagger:runtime-pom:0.0.2'

    compile group: 'net.wasdev.wlp.starters.springbootweb', name: 'compile-pom', version: '0.0.3'
    compile 'net.wasdev.wlp.starters.watsonsdk:compile-pom:0.0.4'
}

test {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    exclude '**/it/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.name': warContext, 'running.bluemix': 'false', 'cf.context.root': cfContextRoot ]
}

task copyConfigSnippetsToServer {
    doLast {
        def serverSnippetCopySpecs = []
        configurations.runtime.resolvedConfiguration.getFirstLevelModuleDependencies().each {
            addServerSnippetDependencies(it, serverSnippetCopySpecs)
        }
        copy {
            into "${serverDirectory}/configDropins/defaults"
            with serverSnippetCopySpecs.toArray(new CopySpec[serverSnippetCopySpecs.size()])
        }
    }
}

def addServerSnippetDependencies(resolvedDependency, copySpecs) {
    if ("server-snippet".equals(resolvedDependency.getModuleName())) {
        resolvedDependency.getModuleArtifacts().each { artifact ->
            copySpecs.add(copySpec {
                from artifact.getFile()
                rename { String fileName ->
                    resolvedDependency.getModuleGroup() + fileName
                }
            })
        }
    }
    resolvedDependency.getChildren().each {
        addServerSnippetDependencies(it, copySpecs)
    }
}

task publishServerConfig(type: Copy) {
    from 'src/main/liberty/config/server.xml'
    into serverDirectory
}

task publishWar(type: Copy) {
    from(war)
    into("${serverDirectory}/dropins")
}

task createServerBootstrap() {
    outputs.file("${serverDirectory}/bootstrap.properties")
    doLast {
        def bootstrapProperties = file("${serverDirectory}/bootstrap.properties")
        if (!bootstrapProperties.exists()) {
            bootstrapProperties << "default.http.port=${testServerHttpPort}\ndefault.https.port=${testServerHttpsPort}"
        }
    }
}

liberty {
    install {
        runtimeUrl = "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/16.0.0.3/wlp-webProfile7-16.0.0.3.zip"
    }
    serverName = wlpServerName
    packageLiberty {
        archive = packageFile
        include = packagingType
    }
    features {
        name = ['apiDiscovery-1.0']
        if (project.hasProperty('acceptFeaturesLicense') && acceptFeaturesLicense) {
            acceptLicense = true
        } else {
            throw new GradleException("You must set a value for the 'acceptFeaturesLicense' property. Please review the license terms and conditions for additional features to be installed and if you accept the license terms and conditions then run the Gradle command with '-PacceptFeaturesLicense=true'.")
        }
    }
}

task libertyStartTestServer(type: net.wasdev.wlp.gradle.plugins.tasks.StartTask){
    description 'Starts the WebSphere Liberty Profile server for testing.'
    logging.level = LogLevel.INFO
}

tasks.create('setupServer')
check.dependsOn 'integrationTest'
installFeature.dependsOn 'installLiberty'
setupServer.dependsOn 'createServerBootstrap', 'publishServerConfig', 'copyConfigSnippetsToServer', 'installFeature', 'publishWar'
publishWar.dependsOn 'war'
libertyStart.dependsOn 'setupServer'
integrationTest.dependsOn 'libertyStartTestServer', 'testClasses'
integrationTest.finalizedBy 'libertyStop'
libertyStartTestServer.dependsOn 'setupServer'
assemble.dependsOn 'libertyPackage'
libertyPackage.dependsOn 'setupServer'
